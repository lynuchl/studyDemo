
    1.AOP（Aspect-OrientedProgramming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、
继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，
OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。
对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，
它导致了大量代码的重复，而不利于各个模块的重用。而AOP技术则恰恰相反，它利用一种称为“横切”的技术，
剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，
却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，
如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。
而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。使用“横切”技术，AOP把软件系统分为两个部分：
核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，
而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。
正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”实现AOP的技术，
主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，
从而使得编译器可以在编译期间织入有关“方面”的代码。

2.java持久层访问数据库的方式大致分为两种:一种以sql为核心，封装一定程度的jdbc操作，比如:Mybatis.另外一种是以java实体类为核心，将实体类和数据库表
之间建立映射关系，比如：hibernate,spring data jpa.不同的数据库厂商都有自己的实现类，后来统一规范后，有了数据库启动，使用java语言操作数据库的时候，
也就是jdbc,是来操作不同的数据库规范。

3.JPA全称是Java Persistence API (java 持久层 API),它是JAVAEE 5中提出的java持久化规范，为java开发人员提供了一种对象/关系映射工具，来管理java应用
中的关系数据。它是一种规范，统一了java应用程序访问ORM框架的规范。其提供了以下规范:(1)ORM映射元数据，(2)JPA的API,用来操作实体对象，执行CURD操作，使得
开发人员不用再写SQL了。(3)JPQL查询语言。

4.JPA是一个规范不是一个框架，hibernate是再JPA的规范下的一种实现。Spring Data是Spring社区的子项目,主要用于简化数据的访问。Spring Data JPA给我们提供主要
的类和接口。Hibernate是JPA规范的一种实现，spring data jpa 是一个JPA数据访问抽象，它只是一个抽象层，底层依赖hibernate.

