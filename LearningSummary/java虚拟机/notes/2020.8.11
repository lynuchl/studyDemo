1.jdk：java程序设计语言；java虚拟机；java API类库统称为JDK。2.把java API类库的Java SE API 子集和java虚拟机这两部分统称为JRE。

2.java EE 的扩展一般以javax.*作为包名，java.*为包名的是java SE API的核心包。

3.(1)查看本机的所有虚拟机:jps (2)查看虚拟机的线程堆栈信息:jstack [vmid]

4.Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格的按照顺序紧凑的排列在Class文件中，中间没有任何分隔符，这使得整个Class文件中的存储内容全部都是程序
运行的必要数据。

5.JVM通过类加载器加载class文件里的字节码后，会通过解释器解释成汇编指令，最终再转译成CPU可以识别的机器指令。

6.我们可以将程序理解为一段可执行的指令集合，而这个程序启动后，操作系统就会为他分配 CPU、内存等资源，而这个正在运行的程序就是我们说的进程。进程是操作系统对处理器中运行的
程序的一种抽象，而为进程分配的内存及 CPU 资源就是这个进程的上下文，保存了当前执行的指令及变量值。而 JVM 启动后也是 Linux 上的一个普通进程，进程的物理实体和支持进程运行
的环境合称为上下文。

7.当同时启动多个jvm，并同时打印一个对象，返回的hash地址是一致的，也就是说明每个线程都有独立的地址空间。

8.虚拟机把描述类的数据从Class文件加载到内存,并对数据进行校验、转换解析、和初始化,最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。

9.类的加载阶段:"加载"阶段是"类加载"过程的一个阶段，虚拟机需要完成三个步骤:(1)通过一个类的全限定名来获取定义此类的二进制字节流(2)将这个字节流所代表的静态存储结构转换为方法
区的运行时数据结构(3)在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。

10.Class类文件的结构:
(1)魔数和Class文件的版本:每个Class文件的头4个字节称为魔数
(2)常量池:常量池之中主要存放两大类常量，字面量(java语言层面的常量概念)和符号引用(编译原理方面的概念，包括三类常量:类和接口的全限定名，字段的名称和描述符，方法的名称和描述符)
(3)访问标志:这个标志用于识别一些类或接口层次的访问信息。包括(这个Class是类还是接口，是否定义为public类型等待)
(4)类索引,父类索引，和接口索引集合。来确定这个类的继承关系。
(5)字段表:用于描述接口或类中声明的变量。
(6)方法表集合
(7)属性表集合:其中Code属性描述方法体的代码。
(8)Code属性是Class文件中最重要的一个属性，如果把一个java程序中的信息分为代码(Code，方法体里面的java代码)和元数据(Metadata,包括类，字段，方法定义以及其它信息)两部分，
(9)异常
