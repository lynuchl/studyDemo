1.类加载的时机:加载，验证，准备，解析，初始化，使用，卸载。

2.准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。

3.解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。

4.初始化阶段是执行类构造器<clinit>()方法的过程,其是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件出现的先后顺序决定的，
静态语句块中只能访问到定义在静态语句块之前的变量。

5.栈帧是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈的栈元素。栈帧存储了方法的局部变量表，操作数栈，动态连接和方法返回地址等信息。每个方法从
调用开始到执行完成的过程，就对应这一个栈帧在虚拟机栈里面从入栈到出栈的过程。

6.Class文件的常量池中存在大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次用的时候转化为直接引用，这种
转化为静态解析。另外一部分将在每一次的运行期间转化为直接引用，这部分称为动态链接。

7.调用目标在程序代码写好，编译器进行编译时就必须确定下来。这类方法的调用称为解析，在java中，符合"编译器可知，运行期间不可变"这个要求的方法主要有静态方法和私有方法
两大类，前者直接和类型相关联，后者在外部不可被访问，这两种都不能通过继承或别的方式重写出其它版本，因此它们都适合在类加载的阶段进行解析。

8.java中主要支持泛型，变长参数，自动装箱拆箱，等待语法糖，虚拟机运行时，不支持这些语法，它们在编译期被还原回简单的基础语法结构。

9.如何用户没有提供任何的构造函数，那么编译器将会添加一个没有参数的，访问性为(public,protect或private的)

10.方法重载要求方法具备不同的特征签名，返回值并不包含在方法的特征签名中，返回值不参与重载选择，但是在Class文件格式之中，只要描述符不是完全一致的两个方法就可以共存。也就是
说两个方法如果有相同的名称和特征签名，但是返回值不同，那么也可以合法的共存于一个Class文件中。

11.当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要额外的同步，或者在调用方进行任何其它协调操作，调用这个对象的行为都可以获得正确的
结果，那这个对象就是安全的。