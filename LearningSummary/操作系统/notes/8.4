1.同一时间间隔(并发);同一时刻(并行)。

2.从汇编角度, 操作系统和程序是什么关系？
  这个问题里面包含了三个因素：汇编，操作系统和程序。实际上还有另外一个因素是隐藏的，那就是计算机硬件本身。这个问题的主题本质上就是要讨论这几种东西之间的关系了。那么下面就来简单说一下。
  (1).计算机硬件：计算机硬件包含很多部件，但是这个问题里面要讨论的东西显然就是用于执行程序的CPU了。那么这里就单讨论CPU。从CPU的角度来讲，我们要认清一个事实：计算机的CPU只能执行二进制的机器码，
  形式上也就是一串一串0和1的组合。CPU不认识C语言，不认识Java，不认识PHP，不认识JavaScript，只认识0和1组成的机器码。另外需要说明的是，机器码的格式是和CPU的种类高度相关的，不同品牌的CPU的机器码
  是完全不一样的，相互之间无法通用。比如电脑用Intel的CPU，那么Intel架构下面的机器码如果放到手机设备常用的ARM架构的CPU里是完全无法执行的，就是这个道理。

  (2). 汇编语言： 汇编语言其实是一种为了帮助程序员阅读和书写机器码的语言。比如有一段16位机器码：0000000100010010，我们假设前8位二进制代表移动操作，9-12位表示目标寄存器编号，13-16位表示
  源寄存器编号，我们就能知道这串代码的含义是把2号寄存器的内容移动到1号寄存器。但是这样的形式对于人类来说很不直观，不过如果我们把前8位用MOV三个字母代替，把1号寄存器叫做AX，2号寄存器叫做BX的话，
  那么这段代码就可以翻译成:MOV AX, BX 。这样看上去就比一串数字要有好多了。这就是汇编语言的来历。汇编语言其实是机器码的一种简单对应转化，起到帮助人类记忆和阅读的作用。汇编语言不需要编译器，
  只需要简单翻译一下就好，其本质还是机器码。

  (3). 程序:程序是指计算机能够执行的一段代码的集合。从计算机硬件（CPU），也就是题主说的“裸机”的角度来讲，程序的内容就是也只能是二进制的机器码。至于人类写程序的时候用的是什么语言，C语言？Java？C++？
  PHP？汇编？无论哪一种语言，最终都会通过某种形式转换成机器码后在CPU上执行。注意：操作系统本身也是一个程序。
  
  (4). 操作系统:操作系统产生是为了让人类能够更方便、有效地利用计算机而开发出来的一种程序。操作系统提供了很多便捷的功能，让人类能够高效地读写计算机文件，放音乐，打游戏；操作系统还提供了很多有用的功能
  接口（API），让其他程序员能够基于操作系统上开发更多有意思的程序。但是无论如何，操作系统的本质还是一大堆二进制机器码的集合。操作系统绝对不是计算机运行程序的必要条件。只要程序员能写出有效的机器码并
  送入CPU，计算机就能执行程序，根本就不一定需要操作系统。举个例子：1960——1970年代的很多科研用计算机程序就是把程序员把机器码写好，然后通过打孔的形式把机器码记录在纸带上，在让计算机通过纸带读取器把
  机器码读入CPU执行的，从头到尾根本没有操作系统什么事儿，那个年代也根本没有操作系统。
  
  总结回答:首先问题中说的从“汇编”的角度，我揣测题主是要表达的是“从CPU能运行的最本质代码的角度"这个意思，所以“汇编”应改成“机器码”比较合适；题主对CPU运行程序的机理是有认识的，但是没有明确说出“CPU运行
  程序就是运行二进制机器码”这个观点；      其次题主提出的核心问题：操作系统和程序的关系，理论上CPU并不需要操作系统才能运行程序，只要能把一段二进制机器码输入CPU程序就能运行。不过，为了操作的方便性
  ，目前现实生活中99.99%的计算机硬件架构都有匹配的操作系统可以运行，单方面追求越过操作系统让CPU直接执行程序没什么意义。所以绝大部分程序都是基于操作系统开发的，程序中调用了操作系统提供的应用程序接口
  （API），这就从客观上造成了程序对操作系统的依赖。既然有了依赖，那么就必须要让操作系统先运行起来，程序才能正常工作。 至于题主关心的程序在编译以后是否包含着操作系统的机器码（题主写的是汇编，但是应
  该是机器码才合适）的问题，其实程序本身没必要把系统级的机器码包含进来。在计算机编程中一个很重要的概念是“调用”。既然操作系统已经提供了现成的二进制代码可用，那么程序在自己的二进制代码里只要做一个CALL指令
  ，然后跳转到操作系统指定的功能入口地址即可。如果没一个程序在调用系统功能的时候都要把二进制代码包含进来，那么程序就会变得非常臃肿了。

3.并发和共享是操作系统的最基本的特征，互斥共享方式;同时访问方式;

4. (1)cpu核心:cpu核心就是cpu执行指令的芯片。一颗核心在同一时间只能做一件事情（执行一条指令），一般我们说的cpu利用率就是在一定时间内cpu运行指令所占用的总时间比例，当一个cpu利用率达到100%，就说明
cpu一直在做事情。多核cpu就是把多个cpu核心融合到一个物理cpu上。但是，一般上次软件在执行任务（比如对一个文件进行des加密）的时候，会将一个任务分成多个指令执行（当然这也说不太严谨，因为上层的任务本身
就是由许多小的指令组成的，比如des加密，不是说直接把数据传给cpu，cpu就给你加密了，而是执行加密des这个操作，软件层是许多诸如加、减、乘、除、位运算等步骤组成的，而又比如软件层的乘这个操作，底层也是由
加和位运算组成）比如我多个进程执行不同的任务，底层是很多小的任务，然后单核cpu会轮询的执行这些任务。你上层看起来是并行的，其实底层是串行的（你可以想像一下，飞机检票，一个检票口两列）。
  (2). 进程狭义定义：进程是正在运行的程序的实例（an instance of a computer program that is being executed）。广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作
系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。比如你写了个软件，那么这个软件运行后就是产生一个或者n个进程（至于是一个还是n个，那是你代码控制的），你可以在
进程管理器上看到的，可以从系统层面来管理（发送信号、杀死等操作）。具体的也不好描述。
  (3). 线程线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条
线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。大部分语言默认情况下，是顺序执行的，顺序只需就会遇到阻塞（连接某个tcp端口，但是对方迟迟不响应）后面的操作
就不能执行，你就一直等着。如果你想执行后面的操作咋办，需要就出现了线程的概念，我可以一边连接某个tcp端口，一边在界面上显示总共花了多长时间。多线程是逻辑上让多个任务同时执行，底层也是让cpu来回在不同的
线程上切换（比如先看看tcp连接对方是否已经响应了，如果没响应，就切换到另一个线程去绘制界面）
  (4).并行和并发感觉网上这个我图还不错，一个核心的情况下，单一时间只能做一个事情，于是在不同任务上切换，从宏观上来看，几个任务是同时执行，但微观来看，并不是同时执行，这个就是并发而多核cpu的情况下，
每个cpu核心都能单独做自己的事情，这个就是并行

5.字符编码：
  中国人民通过对 ASCII 编码的中文扩充改造，产生了 GB2312 编码，可以表示6000多个常用汉字。汉字实在是太多了，包括繁体和各种字符，于是产生了 GBK 编码，它包括了 GB2312 中的编码，同时扩充了很多。中国
是个多民族国家，各个民族几乎都有自己独立的语言系统，为了表示那些字符，继续把 GBK 编码扩充为 GB18030 编码。每个国家都像中国一样，把自己的语言编码，于是出现了各种各样的编码，如果你不安装相应的编码，
就无法解释相应编码想表达的内容。终于，有个叫 ISO 的组织看不下去了。他们一起创造了一种编码 UNICODE ，这种编码非常大，大到可以容纳世界上任何一个文字和标志。所以只要电脑上有 UNICODE 这种编码系统，
无论是全球哪种文字，只需要保存文件的时候，保存成 UNICODE 编码就可以被其他电脑正常解释。UNICODE 在网络传输中，出现了两个标准 UTF-8 和 UTF-16，分别每次传输 8个位和 16个位。于是就会有人产生疑问，
UTF-8 既然能保存那么多文字、符号，为什么国内还有这么多使用 GBK 等编码的人？因为 UTF-8 等编码体积比较大，占电脑空间比较多，如果面向的使用人群绝大部分都是中国人，用 GBK 等编码也可以。